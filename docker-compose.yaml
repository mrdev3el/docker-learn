version: "3" # Указываем версию docker-compose

volumes: # Объявляем глобально секцию хранилищ, и указываем какие из них будут доступны глобально (т.е. для любых других контейнеров)
    mongodb_api: # Объявляем mongodb_api в глобальной секции хранилищ
    mongodb_auth: # Объявляем mongodb_auth в глобальной секции хранилищ

networks: # Объявляем список сетей с которыми могут работать контейнеры
    docker-local-network: # Объявим сеть docker-local-network
        driver: bridge # Указываем какой драйвер испотзовать "bridge" - сетевой мост

services:
    frontend: # Сервис FrontEnd
        build:
            context: ./frontend/ # Указываем откуда собрать образ в контекстном виде
            dockerfile: Dockerfile.prod # Указываем что хотим использовать Dockerfile.prod
        container_name: frontend # Указываем имя контейнера
        command: serve -s build -l 3000
        #ports:
        #    - "3000:3000" # Пробрасываем порты из контейнера на хостовую систему (хост:контейнер)
        restart: unless-stopped # Если контейнер упал, перезапусти его
        networks: # Объявляем что контейнер может использовать сети
            - docker-local-network # docker-local-network контейнер может использовать данную сеть

    api: # Сервис API
        build: ./api # Указываем откуда собирать образs
        container_name: api # Указываем имя контейнера
        command: npm run start # Запускаем приложение через npm при старте контейнера
        restart: unless-stopped # Если контейнер упал, перезапусти его
        #ports:
        #    - "3001:3001" # Пробрасываем порты из контейнера на хостовую систему (хост:контейнер)
        environment: # Объявляем переменные окрудения
            - PORT=3001 # Задекларируем переменную PORT и присвоим ей значение 3001
            #- HOST=http://docker.local # Задекларируем переменную HOST и присвоим ей значение
            - MONGO_URL=mongodb://api_db:27017/api # Задекларируем переменную MONGO_URL и присвоим ей значение адреса хоста mongodb
            - AUTH_API_URL=http://auth:3002/api # Задекларируем переменную AUTH_API_URL и присвоим ей значение адреса хоста api сервиса
        depends_on: # Указываем зависимости запуска для этого сервиса, т.е. ПОСЛЕ каких сервисов он будет стартовать
            - api_db
        networks: # Объявляем что контейнер может использовать сети
            - docker-local-network # docker-local-network контейнер может использовать данную сеть

    auth: # Сервис авторизации
        build: ./auth # Указываем откуда собирать образs
        container_name: auth # Указываем имя контейнера
        command: npm run start # Запускаем приложение через npm при старте контейнера
        restart: unless-stopped # Если контейнер упал, перезапусти его
        #ports:
        #    - "3002:3002" # Пробрасываем порты из контейнера на хостовую систему (хост:контейнер)
        environment: # Объявляем переменные окрудения
            - PORT=3002 # Задекларируем переменную PORT и присвоим ей значение 3002
            #- HOST=http://docker.local # Задекларируем переменную HOST и присвоим ей значение
            - MONGO_URL=mongodb://auth_db:27017/auth # Задекларируем переменную MONGO_URL и присвоим ей значение адреса хоста mongodb
            - API_URL=http://api:3001/api
        depends_on: # Указываем зависимости запуска для этого сервиса, т.е. ПОСЛЕ каких сервисов он будет стартовать
            - auth_db
        networks: # Объявляем что контейнер может использовать сети
            - docker-local-network # docker-local-network контейнер может использовать данную сеть

    api_db: # Сервис API_DB
        image: mongo:latest # Указываем какой БАЗОВЫЙ образ хотим подтянуть для этого сервиса
        container_name: api_db # Указываем имя контейнера
        volumes: # Устанавливаем хранилище для файлов базы данных
            - mongodb_api:/data/db # Задаем имя хранилища "mongodb_api" и указываем путь внутри контейнера, на который хранилище будет ссылаться
        networks: # Объявляем что контейнер может использовать сети
            - docker-local-network # docker-local-network контейнер может использовать данную сеть

    auth_db: # Сервис AUTH_DB
        image: mongo:latest # Указываем какой БАЗОВЫЙ образ хотим подтянуть для этого сервиса
        container_name: auth_db # Указываем имя контейнера
        volumes: # Устанавливаем хранилище для файлов базы данных
            - mongodb_auth:/data/db # Задаем имя хранилища "mongodb_auth" и указываем путь внутри контейнера, на который хранилище будет ссылаться
        networks: # Объявляем что контейнер может использовать сети
            - docker-local-network # docker-local-network контейнер может использовать данную сеть

    nginx: # Сервис nginx
        image: nginx:stable-alpine # Указываем какой базовый образ хотим подтянуть для этого сервиса
        container_name: nginx # Указываем имя контейнера
        ports:
            - "80:80" # Пробрасываем порты из контейнера на хостовую систему (хост:контейнер)
        volumes: # Устанавливаем хранилище для файлов базы данных
            - ./nginx/nginx.conf.prod:/etc/nginx/conf.d/nginx.conf # Пробрасываем наш кастомный nginx.conf внутрь контейнера
        depends_on: # Указываем зависимости запуска для этого сервиса, т.е. ПОСЛЕ каких сервисов он будет стартовать
            - frontend
            - api
            - auth
        networks: # Объявляем что контейнер может использовать сети
            - docker-local-network # localhost-local-network контейнер может использовать данную сеть

